% layout 'default';
% title 'Chat WebSocket';

<div style="max-width: 800px; margin: 0 auto; padding: 20px;">
    <h1 style="text-align: center; color: #333;">üí¨ Chat en Tiempo Real</h1>
    
    <div style="background: #f8f9fa; border-radius: 10px; padding: 20px; margin: 20px 0;">
        <h2>Conectando al chat...</h2>
        <div id="connection-status" style="padding: 10px; background: #fff3cd; border-radius: 5px;">
            Estado: <span id="status">Desconectado</span>
        </div>
    </div>

    <div id="chat-container" style="display: none;">
        <div id="messages" style="height: 300px; overflow-y: auto; border: 1px solid #ddd; 
                  border-radius: 5px; padding: 15px; background: white; margin-bottom: 15px;">
            <!-- Mensajes aparecer√°n aqu√≠ -->
        </div>
        
        <div style="display: flex; gap: 10px;">
            <input type="text" id="username" placeholder="Tu nombre" 
                   style="flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <input type="text" id="message" placeholder="Escribe un mensaje..." 
                   style="flex: 3; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
            <button id="send-btn" onclick="sendMessage()" 
                    style="padding: 10px 20px; background: #007cba; color: white; 
                           border: none; border-radius: 5px; cursor: pointer;">
                Enviar
            </button>
        </div>
    </div>

    <div style="margin-top: 30px; text-align: center;">
        <button onclick="connectWebSocket()" 
                style="padding: 10px 20px; background: #28a745; color: white; 
                       border: none; border-radius: 5px; cursor: pointer; margin: 5px;">
            üîå Conectar Chat
        </button>
        <button onclick="disconnectWebSocket()" 
                style="padding: 10px 20px; background: #dc3545; color: white; 
                       border: none; border-radius: 5px; cursor: pointer; margin: 5px;">
            ‚ö†Ô∏è Desconectar
        </button>
    </div>
</div>

<script>
let ws = null;

function connectWebSocket() {
    if (ws && ws.readyState === WebSocket.OPEN) {
        addMessage('Ya est√°s conectado!', 'system');
        return;
    }

    // Conectar al endpoint WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = protocol + '//' + window.location.host + '/ws/demo';
    
    ws = new WebSocket(wsUrl);
    
    // Actualizar estado de conexi√≥n
    updateStatus('Conectando...', 'warning');
    
    ws.onopen = function(event) {
        console.log('Conectado al WebSocket');
        updateStatus('üü¢ Conectado', 'success');
        document.getElementById('chat-container').style.display = 'block';
        addMessage('‚úÖ Conectado al chat en tiempo real!', 'system');
    };
    
    ws.onmessage = function(event) {
        console.log('Mensaje recibido:', event.data);
        const data = JSON.parse(event.data);
        handleMessage(data);
    };
    
    ws.onclose = function(event) {
        console.log('Desconectado del WebSocket');
        updateStatus('üî¥ Desconectado', 'error');
        document.getElementById('chat-container').style.display = 'none';
        addMessage('‚ö†Ô∏è Desconectado del chat', 'system');
    };
    
    ws.onerror = function(error) {
        console.error('Error WebSocket:', error);
        updateStatus('‚ùå Error de conexi√≥n', 'error');
        addMessage('‚ùå Error de conexi√≥n', 'system');
    };
}

function disconnectWebSocket() {
    if (ws) {
        ws.close();
        ws = null;
    }
}

function sendMessage() {
    if (!ws || ws.readyState !== WebSocket.OPEN) {
        alert('Primero debes conectar al chat!');
        return;
    }
    
    const username = document.getElementById('username').value || 'An√≥nimo';
    const message = document.getElementById('message').value;
    
    if (!message.trim()) {
        alert('Escribe un mensaje!');
        return;
    }
    
    const data = {
        type: 'message',
        user: username,
        message: message,
        timestamp: Date.now()
    };
    
    ws.send(JSON.stringify(data));
    document.getElementById('message').value = '';
}

function handleMessage(data) {
    switch(data.type) {
        case 'welcome':
            addMessage(data.message, 'system');
            break;
        case 'broadcast':
            addMessage(`${data.user}: ${data.message}`, 'user', data.timestamp);
            break;
        case 'ack':
            console.log('Mensaje confirmado:', data.message);
            break;
        case 'error':
            addMessage(`‚ùå Error: ${data.message}`, 'error');
            break;
        case 'pong':
            addMessage('üèì Pong recibido!', 'system');
            break;
        default:
            addMessage(`Mensaje desconocido: ${JSON.stringify(data)}`, 'system');
    }
}

function addMessage(text, type, timestamp) {
    const messagesDiv = document.getElementById('messages');
    const messageDiv = document.createElement('div');
    
    // Formatear timestamp
    let timeStr = '';
    if (timestamp) {
        const date = new Date(timestamp * 1000 || timestamp);
        timeStr = `[${date.toLocaleTimeString()}] `;
    }
    
    messageDiv.innerHTML = `<strong>${timeStr}</strong>${text}`;
    
    // Estilos seg√∫n tipo
    switch(type) {
        case 'system':
            messageDiv.style.color = '#6c757d';
            messageDiv.style.fontStyle = 'italic';
            break;
        case 'error':
            messageDiv.style.color = '#dc3545';
            messageDiv.style.fontWeight = 'bold';
            break;
        case 'user':
            messageDiv.style.color = '#007cba';
            break;
    }
    
    messageDiv.style.marginBottom = '10px';
    messageDiv.style.padding = '5px';
    messageDiv.style.borderBottom = '1px solid #eee';
    
    messagesDiv.appendChild(messageDiv);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function updateStatus(text, type) {
    const statusElement = document.getElementById('status');
    statusElement.textContent = text;
    
    // Colores seg√∫n tipo
    statusElement.style.color = {
        'success': '#28a745',
        'error': '#dc3545',
        'warning': '#ffc107'
    }[type] || '#6c757d';
}

// Enviar mensaje con Enter
document.getElementById('message').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// Ping peri√≥dico para mantener conexi√≥n viva
setInterval(() => {
    if (ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({type: 'ping'}));
    }
}, 30000); // Cada 30 segundos
</script>